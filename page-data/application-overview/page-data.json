{"componentChunkName":"component---src-pages-application-overview-index-mdx","path":"/application-overview/","result":{"pageContext":{"frontmatter":{"title":"Application Overview"},"relativePagePath":"/application-overview/index.mdx","titleType":"page","MdxNode":{"id":"2b9f3bb2-8e18-526b-a2ca-5a5c28b849bc","children":[],"parent":"a81bfd64-2ad5-5f1f-93c2-030e0b6105b0","internal":{"content":"---\ntitle: Application Overview\n---\n\nThe application is a simple store front shopping application that displays a catalog of antique computing devices, where users can search and buy products. It has a web interface that relies on separate BFF (Backend for Frontend) services to interact with the backend data.  There is also a mobile application that uses IBM Mobile Foundation as the Mobile BFF to provide mobile app security, interact witth backend services and also enable sending of Mobile Push Notifications.\n\nThere are several components of this architecture.\n\n* This OmniChannel application contains an [AngularJS](https://angularjs.org/) based web application and a hybrid-ionic mobile application.\n* The Web app invokes its own backend Microservice to fetch data, we call this component BFFs following the [Backend for Frontends](http://samnewman.io/patterns/architectural/bff/) pattern.  In this Layer, front end developers usually write backend logic for their front end.  The Web BFF is implemented using the Node.js Express Framework. For the mobile application the mobile BFF function is provided out-of-the-box by IBM Mobile Foundation services that have to be configured appropriately.   These Microservices are packaged as Docker containers and managed by Kubernetes cluster.\n* The BFFs invokes another layer of reusable Java Microservices. In a real world project, this is sometimes written by different teams.  The reusable microservices are written in Java. They run inside a Kubernetes cluster, for example the [IBM Cloud Kubernetes Service](https://www.ibm.com/cloud/container-service) or [Red Hat Openshift](https://www.redhat.com/en/technologies/cloud-computing/openshift), using [Docker](https://www.docker.com/).\n* The Java Microservices are as follows:\n  + The Inventory Service uses an instance of [MySQL](https://www.mysql.com/) to store the inventory items.\n  + The Catalog service retrieves items from a searchable JSON datasource using [ElasticSearch](https://www.elastic.co/).\n  + The Customer service stores and retrieves Customer data from a searchable JSON datasource using [CouchDB](http://couchdb.apache.org/).\n  + The Auth service delegates authentication and authorization.\n  + The Orders Service uses an instance of [MariaDB](https://mariadb.org/) to store order information and integrates with IBM Mobile Foundation Push Notifications to send mobile push notifications on orders shipment status.\n","type":"Mdx","contentDigest":"f0787de5274a473a574b71f3abb6d84e","counter":107,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Application Overview"},"exports":{},"rawBody":"---\ntitle: Application Overview\n---\n\nThe application is a simple store front shopping application that displays a catalog of antique computing devices, where users can search and buy products. It has a web interface that relies on separate BFF (Backend for Frontend) services to interact with the backend data.  There is also a mobile application that uses IBM Mobile Foundation as the Mobile BFF to provide mobile app security, interact witth backend services and also enable sending of Mobile Push Notifications.\n\nThere are several components of this architecture.\n\n* This OmniChannel application contains an [AngularJS](https://angularjs.org/) based web application and a hybrid-ionic mobile application.\n* The Web app invokes its own backend Microservice to fetch data, we call this component BFFs following the [Backend for Frontends](http://samnewman.io/patterns/architectural/bff/) pattern.  In this Layer, front end developers usually write backend logic for their front end.  The Web BFF is implemented using the Node.js Express Framework. For the mobile application the mobile BFF function is provided out-of-the-box by IBM Mobile Foundation services that have to be configured appropriately.   These Microservices are packaged as Docker containers and managed by Kubernetes cluster.\n* The BFFs invokes another layer of reusable Java Microservices. In a real world project, this is sometimes written by different teams.  The reusable microservices are written in Java. They run inside a Kubernetes cluster, for example the [IBM Cloud Kubernetes Service](https://www.ibm.com/cloud/container-service) or [Red Hat Openshift](https://www.redhat.com/en/technologies/cloud-computing/openshift), using [Docker](https://www.docker.com/).\n* The Java Microservices are as follows:\n  + The Inventory Service uses an instance of [MySQL](https://www.mysql.com/) to store the inventory items.\n  + The Catalog service retrieves items from a searchable JSON datasource using [ElasticSearch](https://www.elastic.co/).\n  + The Customer service stores and retrieves Customer data from a searchable JSON datasource using [CouchDB](http://couchdb.apache.org/).\n  + The Auth service delegates authentication and authorization.\n  + The Orders Service uses an instance of [MariaDB](https://mariadb.org/) to store order information and integrates with IBM Mobile Foundation Push Notifications to send mobile push notifications on orders shipment status.\n","fileAbsolutePath":"/home/travis/build/ibm-garage-ref-storefront/docs/src/pages/application-overview/index.mdx"}}}}