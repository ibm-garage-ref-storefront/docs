{"componentChunkName":"component---src-pages-related-repositories-keycloak-mdx","path":"/related-repositories/keycloak/","result":{"pageContext":{"frontmatter":{"title":"Keycloak - JWT token generation","description":"This project demonstrates the usage of Keycloak (alternative to Auth microservice)"},"relativePagePath":"/related-repositories/keycloak.mdx","titleType":"page","MdxNode":{"id":"d359b13c-83e6-50db-b011-b769f1416a3b","children":[],"parent":"24e9798e-0b9b-571c-8c7e-9beec8d01f90","internal":{"content":"---\ntitle: Keycloak - JWT token generation\ndescription: This project demonstrates the usage of Keycloak (alternative to Auth microservice)\n---\n\n## Introduction\n\nThis demonstrates how to generate JWT token using Keycloak. This can be used to authenticate the API user as well as to enable OAuth 2.0 authorization for all OAuth protected APIs using OpenID Connect in the Storefront application. This can be used as an alternative to the Auth microservice.\n\nUsing keycloak, we can add authentication to the services and secure the APIs. It is an open source Identity and Access Management solution.\n\n## Table of Contents\n  * [Run Keycloak](#run-keycloak)\n  * [Access Keycloak console](#access-keycloak-console)\n  * [Realm creation](#realm-creation)\n  * [User creation](#user-creation)\n  * [Client creation](#client-creation)\n  * [Role creation](#role-creation)\n  * [JWT token generation](#jwt-token-generation)\n\n## Run Keycloak\n\nYou can spin up Keycloak instance in different ways.\n\n### Start Keycloak on OpenJDK\n\n- You need to have OpenJDK 1.8 or newer installed on your machine.\n- Download [Keycloak](https://downloads.jboss.org/keycloak/12.0.2/keycloak-12.0.2.zip).\n- Extract the zip file and you should see a directory named `keycloak-12.0.2`.\n- Run the below commands.\n\n```\ncd keycloak-12.0.2\n```\n\nFor linux, run `bin/standalone.sh` and for windows, run `bin/standalone.bat`.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-zip).\n\n### Start Keycloak on Docker\n\nRun the below command.\n\n```\ndocker run -d -p 8085:8080 -e KEYCLOAK_USER=storefront -e KEYCLOAK_PASSWORD=passw0rd! quay.io/keycloak/keycloak:12.0.2\n```\n\nThis will start the keycloak instance on port `8085`. The credentials will be `storefront` and `passw0rd!`.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-docker).\n\n### Start keycloak on Podman\n\nRun the below command.\n\n```\npodman run -p 8085:8080 -e KEYCLOAK_USER=storefront -e KEYCLOAK_PASSWORD=passw0rd! quay.io/keycloak/keycloak:12.0.2\n```\n\nThis will start the keycloak instance on port `8085`. The credentials will be `storefront` and `passw0rd!`.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-podman).\n\n### Start keycloak on kubernetes\n\nRun the below command.\n\n```\nkubectl create -f https://raw.githubusercontent.com/keycloak/keycloak-quickstarts/latest/kubernetes-examples/keycloak.yaml\n```\n\nThis will start the keycloak instance on kubernetes. The credentials will be `admin` and `admin`.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-kube).\n\n### Start keycloak on openshift\n\nRun the below command.\n\n```\noc login -u developer -p developer\noc new-project keycloak\noc process -f https://raw.githubusercontent.com/keycloak/keycloak-quickstarts/latest/openshift-examples/keycloak.yaml \\\n    -p KEYCLOAK_USER=admin \\\n    -p KEYCLOAK_PASSWORD=admin \\\n    -p NAMESPACE=keycloak \\\n| oc create -f -\n```\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-openshift).\n\n### Start keycloak on kubernetes using operator\n\n- Navigate to `Home` -> `Operators` -> `OperatorHub` in the menu on left side.\n- Search for `Keycloak`.\n- Go to Keycloak operator and install it.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-operator-kubernetes).\n\n### Start keycloak on Openshift using operator\n\n- Navigate to `Home` -> `Operators` -> `OperatorHub` in the menu on left side.\n- Search for `Keycloak`.\n- Go to Keycloak operator and install it.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-operator-openshift).\n\n## Access Keycloak console\n\n- Open the Keycloak login console. Access it using `http://<host>:<port>/auth/admin`.\n\nFor example, if you are using Docker it will be <http://localhost:8085/auth/admin>\n\n![Keycloak console](../../images/keycloak_console.png)\n\n## Realm creation\n\n- Open the Keycloak admin console. Access it using `http://<host>:<port>/auth/admin`.\n\nFor example, if you are using Docker it will be <http://localhost:8085/auth/admin>\n\n- Go to Master and click on the drop down. Choose `Add realm` here.\n\n![Keycloak add realm](../../images/keycloak_add_realm.png)\n\n- Now enter the details. Here, we are naming our realm as `sfrealm`.\n\n![Keycloak realm creation](../../images/keycloak_create_realm.png)\n\n- Once, it is created successfully, you will see something like below.\n\n![Storefront Realm](../../images/storefront_realm.png)\n\n## User creation\n\n- To create a user, click on `Users`. Then choose `Add User`.\n\n![Keycloak user creation](../../images/keycloak_user_creation.png)\n\n- Enter the details of the user and click `Save`.\n\n![Keycloak add user](../../images/keycloak_add_user.png)\n\n- Once the user is created, set the password. To do this, navigate to `Credentials` tab. Enter your desired password in the `Password` and `Password confirmation` fields. Also set `Temporary` to `OFF`.\n\n![Keycloak set user credentials](../../images/set_user_credentials.png)\n\n## Client creation\n\n- To create a client, click on `Clients`.\n\n![Keycloak client creation](../../images/client_creation.png)\n\n- You will see a list of available clients here. To create a new one, choose `Create`.\n\n![Keycloak new client creation](../../images/new_client_create.png)\n\n- Enter the necessary client details.\n\n![Keycloak client details](../../images/client_details.png)\n\n- Once the client is created, navigate to `Settings tab`. Click on the `Client Protocol` drop down and choose `Confidential`.\n\n![Keycloak client details](../../images/client_access_type.png)\n\n- Scroll down. Expand `Advanced Settings`. Specify the `Access Token Lifespan` here.\n\n![Keycloak client advanced settings](../../images/client_advanced_settings.png)\n\n- Scroll a further bit down and expand `Authentication Flow Overrrides`. Set `Browser Flow` to `browser` and `Direct Grant Flow` to `direct grant`.\n\n![Keycloak client auth override](../../images/client_auth_override.png)\n\n- Click `Save` to save all the above settings.\n\n- Now click on the `Credentials` tab. In the `Client Authenticator` field, choose `C;ient Id and Secret`\n\n![Keycloak client secret](../../images/client_secret.png)\n\n- Grab the `Secret`.\n\n## Role creation\n\n- To create a realm role, navigate to `Roles`. Click on `Add Role` to create a new role.\n\n![Add realm role](../../images/add_realm_role.png)\n\n- For storefront application, we have two roles namely `admin` and `user`. Create those two as follows.\n\n![admin realm role](../../images/admin_realm_role.png)\n\n![user realm role](../../images/user_realm_role.png)\n\n- Once created, we need to assign these roles to users.\n\n- Navigate to `Users` and click on `View all users` to see the existing users.\n\n![view existing users](../../images/view_users.png)\n\n- Click on the user `foo`. Now, navigate to `Role Mappings`.\n\n![role mappings](../../images/role_mapping.png)\n\n- Select the appropriate role. For the user `foo`, it will be `user`. Once selected, click on `Add selected`.\n\n![foo role mapping](../../images/foo_role_mapping.png)\n\n- Assigned roles for the user `foo` can be viewed.\n\n![view foo roles](../../images/view_foo_roles.png)\n\n- Now similarly add the appropriate roles to the other user `user`. It will be both `user` and `admin`.\n\n![user role mapping](../../images/user_role_mapping.png)\n\n- Assigned roles for the user `user` can be viewed.\n\n![view user roles](../../images/view_user_roles.png)\n\n## JWT token generation\n\nTo generate a token, run the below command.\n\n```\ncurl -L -X POST 'http://<replace_me_with_keycloak_host>:<replace_me_with_keycloak_port>/auth/realms/<replace_me_with_your_realm_name>/protocol/openid-connect/token' \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'client_id=<replace_me_with_client_id>' \\\n  --data-urlencode 'grant_type=password' \\\n  --data-urlencode 'client_secret=<replace_me_with_previously_grabbed_secret>' \\\n  --data-urlencode 'scope=openid' \\\n  --data-urlencode 'username=<replace_me_with_user_name>' \\\n  --data-urlencode 'password=<replace_me_with_password>'\n```\n\nIf it is successful, you will see something like below.\n\n```\n$ curl -L -X POST 'http://localhost:8085/auth/realms/sfrealm/protocol/openid-connect/token' \\\n> -H 'Content-Type: application/x-www-form-urlencoded' \\\n> --data-urlencode 'client_id=bluecomputeweb' \\\n> --data-urlencode 'grant_type=password' \\\n> --data-urlencode 'client_secret=d8de8519-8fd8-4946-8df5-2a24395f9c1e' \\\n> --data-urlencode 'scope=openid' \\\n> --data-urlencode 'username=foo' \\\n> --data-urlencode 'password=bar'\n{\"access_token\":\"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjclpGODhTTjJvRmdyckNlNzA1ZF9rNW5oSTlLMG10WHFWYnZJTDZuTkpJIn0.eyJleHAiOjE2MTMzOTUwMjMsImlhdCI6MTYxMzM5NDQyMywianRpIjoiNGI4OTEzZjAtYTNjNS00NDg2LTg1ZGYtMjdmYmJlZDdlZDEzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDg1L2F1dGgvcmVhbG1zL3NmcmVhbG0iLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMzk4ODNhZTEtMTkzMS00MDczLThkMzEtZGQwZTlmNWVlZGQ3IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiYmx1ZWNvbXB1dGV3ZWIiLCJzZXNzaW9uX3N0YXRlIjoiMjA2ZmE1NTYtZjEyZi00OGM5LWJmOTAtOTIxNTEyOTNjODE5IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODUiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJuYW1lIjoiRm9vIEJhciIsInByZWZlcnJlZF91c2VybmFtZSI6ImZvbyIsImdpdmVuX25hbWUiOiJGb28iLCJmYW1pbHlfbmFtZSI6IkJhciIsImVtYWlsIjoiZm9vQGdtYWlsLmNvbSJ9.kB8_fRvzO-WgVpZH4iMyXgnrixL_OI3y_7aOkXxSFcbZq3qPiWoZSpI-EmFt0SCM8EWR6M7elG7epmNFzvqnFrTP2WCH7ocvVQIu1u8NGxlYu1RuU8Ow6BrbsmBlFxbpPfpdGkIJ-pe0oJFpD1fDh0xxi42rd_YbHLt2s6JPK5FHT9HUnRDvkfbOcRg33SjS5AR-u73E6PGS4Ulu6I-WHF4uyAFTe8QdEYwe0GvRPvpygXyCZu9Wi3MSLi2KrtNWOHYWV4HJ1q-Dso9yNWE59KzWNYb3WWKVoeuVDLR8cq2C3j5EtsLsSuykFOtZdJB3wIc5JJFvjPkmDdBcDNCJbQ\",\"expires_in\":600,\"refresh_expires_in\":1800,\"refresh_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI0YjJhM2U5Ny01NzFjLTQ4MjQtOTFhMy02YjhhMjg2OTVhZDgifQ.eyJleHAiOjE2MTMzOTYyMjMsImlhdCI6MTYxMzM5NDQyMywianRpIjoiN2RiYzM0ZjMtM2I1ZS00N2M3LTk3ODItODc2YzFlYzI4OTkzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDg1L2F1dGgvcmVhbG1zL3NmcmVhbG0iLCJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXV0aC9yZWFsbXMvc2ZyZWFsbSIsInN1YiI6IjM5ODgzYWUxLTE5MzEtNDA3My04ZDMxLWRkMGU5ZjVlZWRkNyIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJibHVlY29tcHV0ZXdlYiIsInNlc3Npb25fc3RhdGUiOiIyMDZmYTU1Ni1mMTJmLTQ4YzktYmY5MC05MjE1MTI5M2M4MTkiLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIn0.opl5h4lQAajECsukVbwhiAuVULRvpxP-rqU66PJKvro\",\"token_type\":\"Bearer\",\"id_token\":\"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjclpGODhTTjJvRmdyckNlNzA1ZF9rNW5oSTlLMG10WHFWYnZJTDZuTkpJIn0.eyJleHAiOjE2MTMzOTUwMjMsImlhdCI6MTYxMzM5NDQyMywiYXV0aF90aW1lIjowLCJqdGkiOiJlZTEwZGU2MC05NWNiLTQxZDEtYTk0YS01Mzk2MWVhOGJiYTYiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXV0aC9yZWFsbXMvc2ZyZWFsbSIsImF1ZCI6ImJsdWVjb21wdXRld2ViIiwic3ViIjoiMzk4ODNhZTEtMTkzMS00MDczLThkMzEtZGQwZTlmNWVlZGQ3IiwidHlwIjoiSUQiLCJhenAiOiJibHVlY29tcHV0ZXdlYiIsInNlc3Npb25fc3RhdGUiOiIyMDZmYTU1Ni1mMTJmLTQ4YzktYmY5MC05MjE1MTI5M2M4MTkiLCJhdF9oYXNoIjoicVBXVnpRNFJOY0g4S2ZGMHVCenhLdyIsImFjciI6IjEiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJGb28gQmFyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZm9vIiwiZ2l2ZW5fbmFtZSI6IkZvbyIsImZhbWlseV9uYW1lIjoiQmFyIiwiZW1haWwiOiJmb29AZ21haWwuY29tIn0.LcaTq0HMbek8Jf9wIVNjtGGJOcWF2iQyIjLfPhdzIG1GP7X7oly0qMpMijWSWYLdNujmymuE5lLbs9Aqq7MT6GqfU_1PnzI6diuQ9etYwaXp5KKX_fAM_sJnWrrs5nJ9MdRINQfA8pEyI3NMgZpQ6n63euO2iPGpZEE0zhBu2CJ2mViqpUHvqQ8LeYNRTWi3JX46CN5s_J-Y7GbxqBiurf6Sko8RAtIAu2bSW6AodL-XPCW3ijB4N7cdZxWKTUnDjhM2cstqo7CMhfS2IrZk75oD96tEbynB14DCDnN6i9_5oZGkex6BLotB1r3HMig9ffV2VwUdMUKO6XSGXDSNJQ\",\"not-before-policy\":0,\"session_state\":\"206fa556-f12f-48c9-bf90-92151293c819\",\"scope\":\"openid email profile\"}\n```\n","type":"Mdx","contentDigest":"c690083a107be49d17b2e03751aaaa62","counter":122,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Keycloak - JWT token generation","description":"This project demonstrates the usage of Keycloak (alternative to Auth microservice)"},"exports":{},"rawBody":"---\ntitle: Keycloak - JWT token generation\ndescription: This project demonstrates the usage of Keycloak (alternative to Auth microservice)\n---\n\n## Introduction\n\nThis demonstrates how to generate JWT token using Keycloak. This can be used to authenticate the API user as well as to enable OAuth 2.0 authorization for all OAuth protected APIs using OpenID Connect in the Storefront application. This can be used as an alternative to the Auth microservice.\n\nUsing keycloak, we can add authentication to the services and secure the APIs. It is an open source Identity and Access Management solution.\n\n## Table of Contents\n  * [Run Keycloak](#run-keycloak)\n  * [Access Keycloak console](#access-keycloak-console)\n  * [Realm creation](#realm-creation)\n  * [User creation](#user-creation)\n  * [Client creation](#client-creation)\n  * [Role creation](#role-creation)\n  * [JWT token generation](#jwt-token-generation)\n\n## Run Keycloak\n\nYou can spin up Keycloak instance in different ways.\n\n### Start Keycloak on OpenJDK\n\n- You need to have OpenJDK 1.8 or newer installed on your machine.\n- Download [Keycloak](https://downloads.jboss.org/keycloak/12.0.2/keycloak-12.0.2.zip).\n- Extract the zip file and you should see a directory named `keycloak-12.0.2`.\n- Run the below commands.\n\n```\ncd keycloak-12.0.2\n```\n\nFor linux, run `bin/standalone.sh` and for windows, run `bin/standalone.bat`.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-zip).\n\n### Start Keycloak on Docker\n\nRun the below command.\n\n```\ndocker run -d -p 8085:8080 -e KEYCLOAK_USER=storefront -e KEYCLOAK_PASSWORD=passw0rd! quay.io/keycloak/keycloak:12.0.2\n```\n\nThis will start the keycloak instance on port `8085`. The credentials will be `storefront` and `passw0rd!`.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-docker).\n\n### Start keycloak on Podman\n\nRun the below command.\n\n```\npodman run -p 8085:8080 -e KEYCLOAK_USER=storefront -e KEYCLOAK_PASSWORD=passw0rd! quay.io/keycloak/keycloak:12.0.2\n```\n\nThis will start the keycloak instance on port `8085`. The credentials will be `storefront` and `passw0rd!`.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-podman).\n\n### Start keycloak on kubernetes\n\nRun the below command.\n\n```\nkubectl create -f https://raw.githubusercontent.com/keycloak/keycloak-quickstarts/latest/kubernetes-examples/keycloak.yaml\n```\n\nThis will start the keycloak instance on kubernetes. The credentials will be `admin` and `admin`.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-kube).\n\n### Start keycloak on openshift\n\nRun the below command.\n\n```\noc login -u developer -p developer\noc new-project keycloak\noc process -f https://raw.githubusercontent.com/keycloak/keycloak-quickstarts/latest/openshift-examples/keycloak.yaml \\\n    -p KEYCLOAK_USER=admin \\\n    -p KEYCLOAK_PASSWORD=admin \\\n    -p NAMESPACE=keycloak \\\n| oc create -f -\n```\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-openshift).\n\n### Start keycloak on kubernetes using operator\n\n- Navigate to `Home` -> `Operators` -> `OperatorHub` in the menu on left side.\n- Search for `Keycloak`.\n- Go to Keycloak operator and install it.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-operator-kubernetes).\n\n### Start keycloak on Openshift using operator\n\n- Navigate to `Home` -> `Operators` -> `OperatorHub` in the menu on left side.\n- Search for `Keycloak`.\n- Go to Keycloak operator and install it.\n\nFor detailed instructions, click [here](https://www.keycloak.org/getting-started/getting-started-operator-openshift).\n\n## Access Keycloak console\n\n- Open the Keycloak login console. Access it using `http://<host>:<port>/auth/admin`.\n\nFor example, if you are using Docker it will be <http://localhost:8085/auth/admin>\n\n![Keycloak console](../../images/keycloak_console.png)\n\n## Realm creation\n\n- Open the Keycloak admin console. Access it using `http://<host>:<port>/auth/admin`.\n\nFor example, if you are using Docker it will be <http://localhost:8085/auth/admin>\n\n- Go to Master and click on the drop down. Choose `Add realm` here.\n\n![Keycloak add realm](../../images/keycloak_add_realm.png)\n\n- Now enter the details. Here, we are naming our realm as `sfrealm`.\n\n![Keycloak realm creation](../../images/keycloak_create_realm.png)\n\n- Once, it is created successfully, you will see something like below.\n\n![Storefront Realm](../../images/storefront_realm.png)\n\n## User creation\n\n- To create a user, click on `Users`. Then choose `Add User`.\n\n![Keycloak user creation](../../images/keycloak_user_creation.png)\n\n- Enter the details of the user and click `Save`.\n\n![Keycloak add user](../../images/keycloak_add_user.png)\n\n- Once the user is created, set the password. To do this, navigate to `Credentials` tab. Enter your desired password in the `Password` and `Password confirmation` fields. Also set `Temporary` to `OFF`.\n\n![Keycloak set user credentials](../../images/set_user_credentials.png)\n\n## Client creation\n\n- To create a client, click on `Clients`.\n\n![Keycloak client creation](../../images/client_creation.png)\n\n- You will see a list of available clients here. To create a new one, choose `Create`.\n\n![Keycloak new client creation](../../images/new_client_create.png)\n\n- Enter the necessary client details.\n\n![Keycloak client details](../../images/client_details.png)\n\n- Once the client is created, navigate to `Settings tab`. Click on the `Client Protocol` drop down and choose `Confidential`.\n\n![Keycloak client details](../../images/client_access_type.png)\n\n- Scroll down. Expand `Advanced Settings`. Specify the `Access Token Lifespan` here.\n\n![Keycloak client advanced settings](../../images/client_advanced_settings.png)\n\n- Scroll a further bit down and expand `Authentication Flow Overrrides`. Set `Browser Flow` to `browser` and `Direct Grant Flow` to `direct grant`.\n\n![Keycloak client auth override](../../images/client_auth_override.png)\n\n- Click `Save` to save all the above settings.\n\n- Now click on the `Credentials` tab. In the `Client Authenticator` field, choose `C;ient Id and Secret`\n\n![Keycloak client secret](../../images/client_secret.png)\n\n- Grab the `Secret`.\n\n## Role creation\n\n- To create a realm role, navigate to `Roles`. Click on `Add Role` to create a new role.\n\n![Add realm role](../../images/add_realm_role.png)\n\n- For storefront application, we have two roles namely `admin` and `user`. Create those two as follows.\n\n![admin realm role](../../images/admin_realm_role.png)\n\n![user realm role](../../images/user_realm_role.png)\n\n- Once created, we need to assign these roles to users.\n\n- Navigate to `Users` and click on `View all users` to see the existing users.\n\n![view existing users](../../images/view_users.png)\n\n- Click on the user `foo`. Now, navigate to `Role Mappings`.\n\n![role mappings](../../images/role_mapping.png)\n\n- Select the appropriate role. For the user `foo`, it will be `user`. Once selected, click on `Add selected`.\n\n![foo role mapping](../../images/foo_role_mapping.png)\n\n- Assigned roles for the user `foo` can be viewed.\n\n![view foo roles](../../images/view_foo_roles.png)\n\n- Now similarly add the appropriate roles to the other user `user`. It will be both `user` and `admin`.\n\n![user role mapping](../../images/user_role_mapping.png)\n\n- Assigned roles for the user `user` can be viewed.\n\n![view user roles](../../images/view_user_roles.png)\n\n## JWT token generation\n\nTo generate a token, run the below command.\n\n```\ncurl -L -X POST 'http://<replace_me_with_keycloak_host>:<replace_me_with_keycloak_port>/auth/realms/<replace_me_with_your_realm_name>/protocol/openid-connect/token' \\\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'client_id=<replace_me_with_client_id>' \\\n  --data-urlencode 'grant_type=password' \\\n  --data-urlencode 'client_secret=<replace_me_with_previously_grabbed_secret>' \\\n  --data-urlencode 'scope=openid' \\\n  --data-urlencode 'username=<replace_me_with_user_name>' \\\n  --data-urlencode 'password=<replace_me_with_password>'\n```\n\nIf it is successful, you will see something like below.\n\n```\n$ curl -L -X POST 'http://localhost:8085/auth/realms/sfrealm/protocol/openid-connect/token' \\\n> -H 'Content-Type: application/x-www-form-urlencoded' \\\n> --data-urlencode 'client_id=bluecomputeweb' \\\n> --data-urlencode 'grant_type=password' \\\n> --data-urlencode 'client_secret=d8de8519-8fd8-4946-8df5-2a24395f9c1e' \\\n> --data-urlencode 'scope=openid' \\\n> --data-urlencode 'username=foo' \\\n> --data-urlencode 'password=bar'\n{\"access_token\":\"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjclpGODhTTjJvRmdyckNlNzA1ZF9rNW5oSTlLMG10WHFWYnZJTDZuTkpJIn0.eyJleHAiOjE2MTMzOTUwMjMsImlhdCI6MTYxMzM5NDQyMywianRpIjoiNGI4OTEzZjAtYTNjNS00NDg2LTg1ZGYtMjdmYmJlZDdlZDEzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDg1L2F1dGgvcmVhbG1zL3NmcmVhbG0iLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMzk4ODNhZTEtMTkzMS00MDczLThkMzEtZGQwZTlmNWVlZGQ3IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiYmx1ZWNvbXB1dGV3ZWIiLCJzZXNzaW9uX3N0YXRlIjoiMjA2ZmE1NTYtZjEyZi00OGM5LWJmOTAtOTIxNTEyOTNjODE5IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODUiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJuYW1lIjoiRm9vIEJhciIsInByZWZlcnJlZF91c2VybmFtZSI6ImZvbyIsImdpdmVuX25hbWUiOiJGb28iLCJmYW1pbHlfbmFtZSI6IkJhciIsImVtYWlsIjoiZm9vQGdtYWlsLmNvbSJ9.kB8_fRvzO-WgVpZH4iMyXgnrixL_OI3y_7aOkXxSFcbZq3qPiWoZSpI-EmFt0SCM8EWR6M7elG7epmNFzvqnFrTP2WCH7ocvVQIu1u8NGxlYu1RuU8Ow6BrbsmBlFxbpPfpdGkIJ-pe0oJFpD1fDh0xxi42rd_YbHLt2s6JPK5FHT9HUnRDvkfbOcRg33SjS5AR-u73E6PGS4Ulu6I-WHF4uyAFTe8QdEYwe0GvRPvpygXyCZu9Wi3MSLi2KrtNWOHYWV4HJ1q-Dso9yNWE59KzWNYb3WWKVoeuVDLR8cq2C3j5EtsLsSuykFOtZdJB3wIc5JJFvjPkmDdBcDNCJbQ\",\"expires_in\":600,\"refresh_expires_in\":1800,\"refresh_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI0YjJhM2U5Ny01NzFjLTQ4MjQtOTFhMy02YjhhMjg2OTVhZDgifQ.eyJleHAiOjE2MTMzOTYyMjMsImlhdCI6MTYxMzM5NDQyMywianRpIjoiN2RiYzM0ZjMtM2I1ZS00N2M3LTk3ODItODc2YzFlYzI4OTkzIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDg1L2F1dGgvcmVhbG1zL3NmcmVhbG0iLCJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXV0aC9yZWFsbXMvc2ZyZWFsbSIsInN1YiI6IjM5ODgzYWUxLTE5MzEtNDA3My04ZDMxLWRkMGU5ZjVlZWRkNyIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJibHVlY29tcHV0ZXdlYiIsInNlc3Npb25fc3RhdGUiOiIyMDZmYTU1Ni1mMTJmLTQ4YzktYmY5MC05MjE1MTI5M2M4MTkiLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIn0.opl5h4lQAajECsukVbwhiAuVULRvpxP-rqU66PJKvro\",\"token_type\":\"Bearer\",\"id_token\":\"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJjclpGODhTTjJvRmdyckNlNzA1ZF9rNW5oSTlLMG10WHFWYnZJTDZuTkpJIn0.eyJleHAiOjE2MTMzOTUwMjMsImlhdCI6MTYxMzM5NDQyMywiYXV0aF90aW1lIjowLCJqdGkiOiJlZTEwZGU2MC05NWNiLTQxZDEtYTk0YS01Mzk2MWVhOGJiYTYiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODUvYXV0aC9yZWFsbXMvc2ZyZWFsbSIsImF1ZCI6ImJsdWVjb21wdXRld2ViIiwic3ViIjoiMzk4ODNhZTEtMTkzMS00MDczLThkMzEtZGQwZTlmNWVlZGQ3IiwidHlwIjoiSUQiLCJhenAiOiJibHVlY29tcHV0ZXdlYiIsInNlc3Npb25fc3RhdGUiOiIyMDZmYTU1Ni1mMTJmLTQ4YzktYmY5MC05MjE1MTI5M2M4MTkiLCJhdF9oYXNoIjoicVBXVnpRNFJOY0g4S2ZGMHVCenhLdyIsImFjciI6IjEiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsIm5hbWUiOiJGb28gQmFyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZm9vIiwiZ2l2ZW5fbmFtZSI6IkZvbyIsImZhbWlseV9uYW1lIjoiQmFyIiwiZW1haWwiOiJmb29AZ21haWwuY29tIn0.LcaTq0HMbek8Jf9wIVNjtGGJOcWF2iQyIjLfPhdzIG1GP7X7oly0qMpMijWSWYLdNujmymuE5lLbs9Aqq7MT6GqfU_1PnzI6diuQ9etYwaXp5KKX_fAM_sJnWrrs5nJ9MdRINQfA8pEyI3NMgZpQ6n63euO2iPGpZEE0zhBu2CJ2mViqpUHvqQ8LeYNRTWi3JX46CN5s_J-Y7GbxqBiurf6Sko8RAtIAu2bSW6AodL-XPCW3ijB4N7cdZxWKTUnDjhM2cstqo7CMhfS2IrZk75oD96tEbynB14DCDnN6i9_5oZGkex6BLotB1r3HMig9ffV2VwUdMUKO6XSGXDSNJQ\",\"not-before-policy\":0,\"session_state\":\"206fa556-f12f-48c9-bf90-92151293c819\",\"scope\":\"openid email profile\"}\n```\n","fileAbsolutePath":"/home/travis/build/ibm-garage-ref-storefront/docs/src/pages/related-repositories/keycloak.mdx"}}}}