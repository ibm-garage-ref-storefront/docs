{"componentChunkName":"component---src-pages-related-repositories-pipelines-mdx","path":"/related-repositories/pipelines/","result":{"pageContext":{"frontmatter":{"title":"Customized OpenShift Pipelines with IBM Garage Cloud Native Toolkit"},"relativePagePath":"/related-repositories/pipelines.mdx","titleType":"page","MdxNode":{"id":"ade12a8c-0824-5508-bacc-6523b7a65988","children":[],"parent":"3ff91783-41f4-57fb-9c9a-4502963fbc63","internal":{"content":"---\ntitle: Customized OpenShift Pipelines with IBM Garage Cloud Native Toolkit\n---\n\n# Introduction\n\nThe sample OpenShift Pipelines that come out of the box with Cloud Pak for Applications (CP4Apps) is a good starting point to get started with DevOps.\nWhen you need more integrations into your pipelines you will need to create your own pipelines extending the CP4Apps,\nor if you just want to have more control over the promotion of the application thru different stages like test, staging, production using GitOps.\nThe environment is configured with the [IBM Garage Cloud Native Toolkit](https://cloudnativetoolkit.dev/) with tools to support the custom pipelines.\n\n## Table of Contents\n  * [Extend, Build & Deploy Kabanero Pipelines](#extend-build-and-deploy-kabanero-pipelines)\n  * [Overview](#overview)\n  * [Pre-requisites](#pre-requisites)\n  * [How to add our custom pipelines to your cluster](#how-to-add-our-custom-pipelines-to-your-cluster)\n  * [How to use artifactory-package-release-update pipeline](#how-to-use-artifactory-package-release-update-pipeline)\n  * [How to use git-package-release-update pipeline](#how-to-use-git-package-release-update-pipeline)\n  * [Create tekton webhook](#create-a-tekton-webhook)\n\n\n# Extend Build And Deploy Kabanero Pipelines\nDevelopers that use [Kabanero](https://kabanero.io/) pipelines often times have to extend these pipelines to do certain tasks that do not come\nin the out-of-the-box Kabanero pipelines. These tasks may include code coverage, or use third party applications like\n[Pact Broker](https://docs.pact.io/pact_broker), [Sonarqube](https://www.sonarqube.org/) or [Artifactory](https://jfrog.com/artifactory/)\nto full-fill software requirements. Currently, there are not many methods to manage and version control your Kabanero\npipelines, and the goal of this repository is to help you get going.\n\n- You will learn how to add our custom pipelines to your dedicated cluster. In addition, not required\nyou will also learn how to manage and version control your kabanero pipelines.\n\n- You will learn how to package, host your pipelines in different environments such as Git or Artifactory and use\nthese pipelines to automate the process of updating the [Kabanero custom resource](https://kabanero.io/docs/ref/general/configuration/kabanero-cr-config.html)\nto a respective host where your Kabanero pipelines exist.\n\n\n# Overview\nWe built our pipelines on top of out of box kabanero java-spring-boot2-build-deploy-pl for Spring boot and nodejs-express-build-deploy-pl for nodejs pipeline. Below are the additional tasks we have in our pipelines at the moment.\n\n- Testing: This task runs all the unit tests required for the application.\n- Sonar Scan: This task performs sonar scan which helps to detect the code smells, vulnerabilities, bugs etc in your application code.\n- Pact Contract Testing: This task performs contract testing. It shares consumer driven contracts and verifies the results using Pact.\n- Health checks: This task checks the roll out status of your deployment once it is deployed to the cluster and verifies the application health.\n- GitOps: This task will update the the deployment manifests residing in gitops-dev repository.\n\n\n### Useful Links\n- [Github Repo for pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines)\n- [Github Repo for pipelines server](https://github.com/ibm-garage-ref-storefront/pipelines-server/)\n\nThis repository includes a set of custom\n[pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines)\n\n| Stable  | Description  |\n|---|---|\n| [artifactory-package-release-update](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines/stable/artifactory-package-release-update)  |  Compress custom pipelines, upload compressed pipelines to artifactory, and updates the Kabanero Custom Resource |\n| [clone-storefront-ms-push-repos-to-org](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines/stable/clone-storefront-ms-push-repos-to-org) | Given a github org name, clone storefront microservices and deploy them to the github org   |\n| [git-package-release-update](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines/stable/git-package-release-update) | Compress custom pipelines, create a github release, upload compressed pipelines to the release, and update the Kabanero Custom Resource |\n| [storefront-nodejs](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines/stable/storefront-nodejs) |  This custom pipeline is built on top of nodejs-build-deploy-pl (out of box kabanero pipeline for nodejs applications). It contains additional tasks such as test, sonar-scan, pact-broker, health checks, and gitops tasks |\n| [storefront-springboot](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines/stable/storefront-springboot) |  This custom pipeline is built on top of java-spring-boot2-build-deploy-pl (out of box kabanero pipeline for java spring boot applications). It contains additional tasks such as test, sonar-scan, pact-broker, health checks, and gitops tasks |\n\n\n# Pre-requisites\nInstall the following CLI's on your laptop/workstation:\n\n  + [`docker cli`](https://docs.docker.com/docker-for-mac/install/)\n  + [`git cli`](https://git-scm.com/downloads)\n  + [`oc cli`](https://docs.openshift.com/container-platform/4.3/welcome/index.html)\n  + [`Openshift 4.3.5 with CloudPak for Apps`](https://www.ibm.com/cloud/cloud-pak-for-applications)\n  + [`tekton cli`](https://github.com/tektoncd/cli)\n  + [`Kabanero 0.6.1`](https://github.com/kabanero-io)\n  + [Tools Kit created by the Catalyst Team](https://cloudnativetoolkit.dev/admin/overview)\n\n\n# How to add our custom pipelines to your cluster\nYou can add the custom pipelines to your cluster we created by following the steps below.\n\n### Steps\n1. Login to your cluster and change to the kabanero namespace\n\n    ```bash\n    oc login --token=your-token --server=your-server\n    oc project kabanero\n    ```\n2. Download our latest release by visiting https://github.com/ibm-garage-ref-storefront/pipelines-server/releases\n\n   Click on `default-kabanero-pipelines.tar.gz` file to download the zip file onto your Downloads.\n\n   Then run the following command to obtain the checksum value. You will use this checksum value later.\n   ```bash\n   > shasum -a 256 default-kabanero-pipelines.tar.gz\n     4c05cb2d593af43a3e4c6818ada1afc4e550e3c6bc08bbbf486eb2ab6ce37274  default-kabanero-pipelines.tar.gz\n   ```\n\n3. Edit your Kabanero Custom Resource and add our pipelines\n\n    ```bash\n    > oc edit kabanero -o yaml\n    ```\n4. Add the following:\n\n   ```yaml\n   stacks:\n     pipelines:\n     - https:\n         url: the-url-to-download-the-zip-file\n       id: pipeline-manager\n       sha256: the-checksum-value-you-generated\n   ```\n   For example we currently are on release v38.0 and our Kabanero custom resource looks like the following:\n\n   ```yaml\n    stacks:\n      pipelines:\n      - https:\n          url: https://github.com/kabanero-io/kabanero-pipelines/releases/download/0.6.1/default-kabanero-pipelines.tar.gz\n        id: default\n        sha256: 64aee2805d36127c2f1e0e5f0fc6fdae5cef19360c1bb506137584f3bd0988cc\n      - https:\n          url: https://github.com/ibm-garage-ref-storefront/pipelines-server/releases/download/39.0/default-kabanero-pipelines.tar.gz\n        id: pipeline-manager\n        sha256: 4c05cb2d593af43a3e4c6818ada1afc4e550e3c6bc08bbbf486eb2ab6ce37274\n   ```\n5. Save your changes\n   ```\n    esc\n    :wq\n   ```\n   You might get an error such as `Unable to save custom resource...` you just need to update the `resourceVersion` key with the latest time stamp.\n\n### Result\n1. Verify the custom pipelines have been added to your cluster as shown below:\n\n    ```bash\n    > tkn pipelines list\n        .\n        .\n        .\n        artifactory-package-release-update-pl      1 week ago    ---                                       ---           ---          ---\n        git-package-release-update-pl              1 week ago    git-package-release-update-pl-run-8fpcq   ---           ---          ---\n        clone-storefront-ms-push-repos-to-org-pl   1 week ago    ---                                       ---           ---          ---\n        storefront-nodejs-pl                       1 week ago    storefront-nodejs-pl-run-7gjbm            ---           ---          ---\n        storefront-springboot-pl                   1 week ago    storefront-springboot-pl-run-glsxs        ---           ---          ---\n        .\n        .\n        .\n    ```\n    *You are now ready to use our custom pipelines.*\n\n# How to use artifactory-package-release-update pipeline\nYou can use this pipeline to package, release your pipelines onto Artifactory. This pipeline is for developers that are extending Kabanero pipelines\nto create custom tasks or pipelines and need a solution to version control your pipelines.\n\n### Pre-reqs\n- Fork the [devops-pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines) repository\n- Deploy [Artifactory](https://github.com/ibm-cloud-architecture/gse-devops/tree/master/cloudpak-for-integration-tekton-pipelines#artifactory) on your Openshift cluster\n\n- Generate an [API Key](https://www.jfrog.com/confluence/display/JFROG/User+Profile).\n- Update Artifactory config map\n[artifactory-config.yaml](./pipelines/stable/artifactory-package-release-update/configmaps/artifactory-config.yaml) and update the `artifactory_key`. Once done, run the following\ncommands:\n\n      oc project kabanero\n      cd ./configmaps\n      oc apply -f artifactory-config.yaml\n### Steps\n1. Go to the [pipelines](./pipelines) directory make any modifications you want to do to any of the pipelines, or include your own.\n\n2. Create your pipeline by running the following command:\n\n        cd pipelines/experimental\n        oc apply --recursive --filename pipelines/experminetal/artifactory-package-release-update/\n3. Go to the dashboard and verify that the `artifactory-package-release-update-pl` has been added to the Tekton dashboard\n\n4. Go to section [Create tekton webhook](#create-a-tekton-webhook) to create your web hook.\n\n5. Go to your forked repository and make a change, and your Tekton dashboard should create a\nnew pipeline run as shown below:\n![Artifactory Package Release Pipeline](../../images/artifactory-package-release-update-pl-rn.gif)\nWhere the `git-source` is defined as the pipeline resource with key [url] and value [github repo url]\n\n### Result\nThe end result should look like the following:\n![alt text](../../images/artifactory-package-release-update-pl-rn.png)\n\n# How to use git-package-release-update pipeline\nYou can use a pipeline to automate the process of extending, packaging and releasing your pipelines via a Git Release. The process is very similar to the section above.\n\n### Pre-reqs\n- Fork this repository [devops-pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines)\n\n### Steps\n1. Add your custom pipelines or modify an existing one\n   If you inspect `./pipelines/` you can create a new folder for each new pipeline you have and follow a similar structure as below.\n\n      ```bash\n      echo pwd\n      ./devops-pipelines/pipelines\n      ├── experimental\n      │   ├── README.md\n      │   ├── abc\n      │   │   ├── bindings\n      │   │   │   ├── abc-pl-pullrequest-binding.yaml\n      │   │   │   └── abc-pl-push-binding.yaml\n      │   │   ├── configmaps\n      │   │   │   └── abc-pl-configmap.yaml\n      │   │   ├── pipelines\n      │   │   │   └── abc-pl.yaml\n      │   │   ├── secrets\n      │   │   │   └── abc-pl-secret.yaml\n      │   │   ├── tasks\n      │   │   │   └── abc-task.yaml\n      │   │   └── template\n      │   │       └── abc-pl-template.yaml\n      │   └── manifest.yaml\n      ├── stable\n      │   ├── README.md\n      │   ├── cde\n      │   │   ├── bindings\n      │   │   │   ├── cde-pl-pullrequest-binding.yaml\n      │   │   │   └── cde-pl-push-binding.yaml\n      │   │   ├── configmaps\n      │   │   │   └── cde-pl-configmap.yaml\n      │   │   ├── pipelines\n      │   │   │   └── cde-pl.yaml\n      │   │   ├── secrets\n      │   │   │   └── cde-pl-secret.yaml\n      │   │   ├── tasks\n      │   │   │   └── cde-task.yaml\n      │   │   └── template\n      │   │       └── cde-pl-template.yaml\n      │   └── manifest.yaml\n    ```\n\n<InlineNotification>\nNote: Pipelines in `experimental` do not get built.\n</InlineNotification>\n\n2. Now drag and drop your pipelines and tasks to any of these folders,\n\n3. You must update the `configmap` and `secret` we provided for you. But first, create another repository such as `devops-server`. In this repo `devops-server` you will be hosting your pipelines as Git releases. Do not forget to create a README.md file.\n\n    Navigate to `pipelines/stable/git-package-release-update/configmaps` and update the `pipeline-server-configmap.yaml`\n\n    ```yaml\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n    name: pipeline-server-configmap\n    namespace: kabanero\n    data:\n        repo_org: your-github-username-or-org\n        repo_name: your-github-repo-where-you-will-host-pipelines\n        image_registry_publish: 'false'\n        kabanero_pipeline_id: pipeline-manager\n    ```\n\n    Update the secret in `pipelines/stable/git-package-release-update/secrets/`\n\n    ```yaml\n    apiVersion: v1\n    kind: Secret\n    metadata:\n        name: pipeline-server-git\n        namespace: kabanero\n        type: kubernetes.io/basic-auth\n    data:\n        password: your-git-token-encoded\n        username: your-git-username-encoded\n    ```\n\n    Now run the following command to be able to retrieve resources for the `kabanero-pipeline` service account.\n\n    ```bash\n    oc adm policy add-cluster-role-to-user view system:serviceaccount:kabanero:kabanero-pipeline\n    ```\n\n4. Create web hook for the [devops-pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines) repository you created on step 1.\n\n5. Deploy your pipeline, tasks, event bindings and trigger templates by running the following command in the [devops-pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines) repo you created on step 1:\n\n    ```bash\n    oc apply --recursive --filename pipelines/stable/git-package-release-update\n    git add .\n    git commit -m \"adding new pipelines...\"\n    git push\n    ```\n### Result\n\n- Your output should be the following:\n![Git Package Release Pipeline](../../images/git-package-release-update-pl-run.gif)\n\n- If you go to the [pipelines-server](https://github.com/ibm-garage-ref-storefront/pipelines-server/) repo you created on step 2, you should see a new release with your zip files as shown below:\n\n- Now inspect your Kabanero Custom Resource to ensure your `default-kabanero-pipelines.tar.gz` got added to the `pipelines` key value pair.\n\n  ```bash\n  oc get kabanero -o yaml\n  ```\n\n  ```yaml\n  stacks:\n      pipelines:\n      - https:\n          url: https://github.com/ibm-garage-ref-storefront/pipelines-server/releases/download/1.0/default-kabanero-pipelines.tar.gz\n      id: pipeline-manager\n      sha256: 8fe10018016e5059640b1a790afe2d6a1ff6c4f54bf3e7e4fa3fc0f82bb2207d\n  ```\n\n- The pipelines that you added to the [pipelines-server](https://github.com/ibm-garage-ref-storefront/pipelines-server/) repository should now be visible on the tekton dashboard as shown below:\n![](../../images/deploy-storefront-ms-to-openshift.png)\n![](../../images/git-package-release-pl.png)\n\nNow you can reuse these pipelines across your organization! If your cluster comes down you now have a backup of your pipelines.\n\n# Create a tekton webhook\n### Pre-reqs\n\nYou need to create an access token on the tekton dashboard or cli in the kabanero namespace.\nEarlier you created a github token on the github dashboard. You will need to get that token or generate another one and\npaste it below.\n![Access Token](/../../images/access-token.gif)\n\n- Web hook Settings:\n    ```\n    Name: devops-demo-kabanero-pipelines\n    Repistory-url: your forked repo url goes here\n    Access Token: Token you generated previously\n    ```\n\n- Target Pipeline Settings\n    ```\n    Namespace: kabanero\n    Pipeline: Choose artifactory-package-release-update-pl or git-package-release-update-pl\n    Service Account: Pipeline\n    Docker Registry: us.icr.io/project-name or docker.hub.io/projectname\n    ```\n","type":"Mdx","contentDigest":"3f009f202e13844c37ce5fbaead4197f","counter":125,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Customized OpenShift Pipelines with IBM Garage Cloud Native Toolkit"},"exports":{},"rawBody":"---\ntitle: Customized OpenShift Pipelines with IBM Garage Cloud Native Toolkit\n---\n\n# Introduction\n\nThe sample OpenShift Pipelines that come out of the box with Cloud Pak for Applications (CP4Apps) is a good starting point to get started with DevOps.\nWhen you need more integrations into your pipelines you will need to create your own pipelines extending the CP4Apps,\nor if you just want to have more control over the promotion of the application thru different stages like test, staging, production using GitOps.\nThe environment is configured with the [IBM Garage Cloud Native Toolkit](https://cloudnativetoolkit.dev/) with tools to support the custom pipelines.\n\n## Table of Contents\n  * [Extend, Build & Deploy Kabanero Pipelines](#extend-build-and-deploy-kabanero-pipelines)\n  * [Overview](#overview)\n  * [Pre-requisites](#pre-requisites)\n  * [How to add our custom pipelines to your cluster](#how-to-add-our-custom-pipelines-to-your-cluster)\n  * [How to use artifactory-package-release-update pipeline](#how-to-use-artifactory-package-release-update-pipeline)\n  * [How to use git-package-release-update pipeline](#how-to-use-git-package-release-update-pipeline)\n  * [Create tekton webhook](#create-a-tekton-webhook)\n\n\n# Extend Build And Deploy Kabanero Pipelines\nDevelopers that use [Kabanero](https://kabanero.io/) pipelines often times have to extend these pipelines to do certain tasks that do not come\nin the out-of-the-box Kabanero pipelines. These tasks may include code coverage, or use third party applications like\n[Pact Broker](https://docs.pact.io/pact_broker), [Sonarqube](https://www.sonarqube.org/) or [Artifactory](https://jfrog.com/artifactory/)\nto full-fill software requirements. Currently, there are not many methods to manage and version control your Kabanero\npipelines, and the goal of this repository is to help you get going.\n\n- You will learn how to add our custom pipelines to your dedicated cluster. In addition, not required\nyou will also learn how to manage and version control your kabanero pipelines.\n\n- You will learn how to package, host your pipelines in different environments such as Git or Artifactory and use\nthese pipelines to automate the process of updating the [Kabanero custom resource](https://kabanero.io/docs/ref/general/configuration/kabanero-cr-config.html)\nto a respective host where your Kabanero pipelines exist.\n\n\n# Overview\nWe built our pipelines on top of out of box kabanero java-spring-boot2-build-deploy-pl for Spring boot and nodejs-express-build-deploy-pl for nodejs pipeline. Below are the additional tasks we have in our pipelines at the moment.\n\n- Testing: This task runs all the unit tests required for the application.\n- Sonar Scan: This task performs sonar scan which helps to detect the code smells, vulnerabilities, bugs etc in your application code.\n- Pact Contract Testing: This task performs contract testing. It shares consumer driven contracts and verifies the results using Pact.\n- Health checks: This task checks the roll out status of your deployment once it is deployed to the cluster and verifies the application health.\n- GitOps: This task will update the the deployment manifests residing in gitops-dev repository.\n\n\n### Useful Links\n- [Github Repo for pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines)\n- [Github Repo for pipelines server](https://github.com/ibm-garage-ref-storefront/pipelines-server/)\n\nThis repository includes a set of custom\n[pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines)\n\n| Stable  | Description  |\n|---|---|\n| [artifactory-package-release-update](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines/stable/artifactory-package-release-update)  |  Compress custom pipelines, upload compressed pipelines to artifactory, and updates the Kabanero Custom Resource |\n| [clone-storefront-ms-push-repos-to-org](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines/stable/clone-storefront-ms-push-repos-to-org) | Given a github org name, clone storefront microservices and deploy them to the github org   |\n| [git-package-release-update](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines/stable/git-package-release-update) | Compress custom pipelines, create a github release, upload compressed pipelines to the release, and update the Kabanero Custom Resource |\n| [storefront-nodejs](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines/stable/storefront-nodejs) |  This custom pipeline is built on top of nodejs-build-deploy-pl (out of box kabanero pipeline for nodejs applications). It contains additional tasks such as test, sonar-scan, pact-broker, health checks, and gitops tasks |\n| [storefront-springboot](https://github.com/ibm-garage-ref-storefront/devops-pipelines/tree/master/pipelines/stable/storefront-springboot) |  This custom pipeline is built on top of java-spring-boot2-build-deploy-pl (out of box kabanero pipeline for java spring boot applications). It contains additional tasks such as test, sonar-scan, pact-broker, health checks, and gitops tasks |\n\n\n# Pre-requisites\nInstall the following CLI's on your laptop/workstation:\n\n  + [`docker cli`](https://docs.docker.com/docker-for-mac/install/)\n  + [`git cli`](https://git-scm.com/downloads)\n  + [`oc cli`](https://docs.openshift.com/container-platform/4.3/welcome/index.html)\n  + [`Openshift 4.3.5 with CloudPak for Apps`](https://www.ibm.com/cloud/cloud-pak-for-applications)\n  + [`tekton cli`](https://github.com/tektoncd/cli)\n  + [`Kabanero 0.6.1`](https://github.com/kabanero-io)\n  + [Tools Kit created by the Catalyst Team](https://cloudnativetoolkit.dev/admin/overview)\n\n\n# How to add our custom pipelines to your cluster\nYou can add the custom pipelines to your cluster we created by following the steps below.\n\n### Steps\n1. Login to your cluster and change to the kabanero namespace\n\n    ```bash\n    oc login --token=your-token --server=your-server\n    oc project kabanero\n    ```\n2. Download our latest release by visiting https://github.com/ibm-garage-ref-storefront/pipelines-server/releases\n\n   Click on `default-kabanero-pipelines.tar.gz` file to download the zip file onto your Downloads.\n\n   Then run the following command to obtain the checksum value. You will use this checksum value later.\n   ```bash\n   > shasum -a 256 default-kabanero-pipelines.tar.gz\n     4c05cb2d593af43a3e4c6818ada1afc4e550e3c6bc08bbbf486eb2ab6ce37274  default-kabanero-pipelines.tar.gz\n   ```\n\n3. Edit your Kabanero Custom Resource and add our pipelines\n\n    ```bash\n    > oc edit kabanero -o yaml\n    ```\n4. Add the following:\n\n   ```yaml\n   stacks:\n     pipelines:\n     - https:\n         url: the-url-to-download-the-zip-file\n       id: pipeline-manager\n       sha256: the-checksum-value-you-generated\n   ```\n   For example we currently are on release v38.0 and our Kabanero custom resource looks like the following:\n\n   ```yaml\n    stacks:\n      pipelines:\n      - https:\n          url: https://github.com/kabanero-io/kabanero-pipelines/releases/download/0.6.1/default-kabanero-pipelines.tar.gz\n        id: default\n        sha256: 64aee2805d36127c2f1e0e5f0fc6fdae5cef19360c1bb506137584f3bd0988cc\n      - https:\n          url: https://github.com/ibm-garage-ref-storefront/pipelines-server/releases/download/39.0/default-kabanero-pipelines.tar.gz\n        id: pipeline-manager\n        sha256: 4c05cb2d593af43a3e4c6818ada1afc4e550e3c6bc08bbbf486eb2ab6ce37274\n   ```\n5. Save your changes\n   ```\n    esc\n    :wq\n   ```\n   You might get an error such as `Unable to save custom resource...` you just need to update the `resourceVersion` key with the latest time stamp.\n\n### Result\n1. Verify the custom pipelines have been added to your cluster as shown below:\n\n    ```bash\n    > tkn pipelines list\n        .\n        .\n        .\n        artifactory-package-release-update-pl      1 week ago    ---                                       ---           ---          ---\n        git-package-release-update-pl              1 week ago    git-package-release-update-pl-run-8fpcq   ---           ---          ---\n        clone-storefront-ms-push-repos-to-org-pl   1 week ago    ---                                       ---           ---          ---\n        storefront-nodejs-pl                       1 week ago    storefront-nodejs-pl-run-7gjbm            ---           ---          ---\n        storefront-springboot-pl                   1 week ago    storefront-springboot-pl-run-glsxs        ---           ---          ---\n        .\n        .\n        .\n    ```\n    *You are now ready to use our custom pipelines.*\n\n# How to use artifactory-package-release-update pipeline\nYou can use this pipeline to package, release your pipelines onto Artifactory. This pipeline is for developers that are extending Kabanero pipelines\nto create custom tasks or pipelines and need a solution to version control your pipelines.\n\n### Pre-reqs\n- Fork the [devops-pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines) repository\n- Deploy [Artifactory](https://github.com/ibm-cloud-architecture/gse-devops/tree/master/cloudpak-for-integration-tekton-pipelines#artifactory) on your Openshift cluster\n\n- Generate an [API Key](https://www.jfrog.com/confluence/display/JFROG/User+Profile).\n- Update Artifactory config map\n[artifactory-config.yaml](./pipelines/stable/artifactory-package-release-update/configmaps/artifactory-config.yaml) and update the `artifactory_key`. Once done, run the following\ncommands:\n\n      oc project kabanero\n      cd ./configmaps\n      oc apply -f artifactory-config.yaml\n### Steps\n1. Go to the [pipelines](./pipelines) directory make any modifications you want to do to any of the pipelines, or include your own.\n\n2. Create your pipeline by running the following command:\n\n        cd pipelines/experimental\n        oc apply --recursive --filename pipelines/experminetal/artifactory-package-release-update/\n3. Go to the dashboard and verify that the `artifactory-package-release-update-pl` has been added to the Tekton dashboard\n\n4. Go to section [Create tekton webhook](#create-a-tekton-webhook) to create your web hook.\n\n5. Go to your forked repository and make a change, and your Tekton dashboard should create a\nnew pipeline run as shown below:\n![Artifactory Package Release Pipeline](../../images/artifactory-package-release-update-pl-rn.gif)\nWhere the `git-source` is defined as the pipeline resource with key [url] and value [github repo url]\n\n### Result\nThe end result should look like the following:\n![alt text](../../images/artifactory-package-release-update-pl-rn.png)\n\n# How to use git-package-release-update pipeline\nYou can use a pipeline to automate the process of extending, packaging and releasing your pipelines via a Git Release. The process is very similar to the section above.\n\n### Pre-reqs\n- Fork this repository [devops-pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines)\n\n### Steps\n1. Add your custom pipelines or modify an existing one\n   If you inspect `./pipelines/` you can create a new folder for each new pipeline you have and follow a similar structure as below.\n\n      ```bash\n      echo pwd\n      ./devops-pipelines/pipelines\n      ├── experimental\n      │   ├── README.md\n      │   ├── abc\n      │   │   ├── bindings\n      │   │   │   ├── abc-pl-pullrequest-binding.yaml\n      │   │   │   └── abc-pl-push-binding.yaml\n      │   │   ├── configmaps\n      │   │   │   └── abc-pl-configmap.yaml\n      │   │   ├── pipelines\n      │   │   │   └── abc-pl.yaml\n      │   │   ├── secrets\n      │   │   │   └── abc-pl-secret.yaml\n      │   │   ├── tasks\n      │   │   │   └── abc-task.yaml\n      │   │   └── template\n      │   │       └── abc-pl-template.yaml\n      │   └── manifest.yaml\n      ├── stable\n      │   ├── README.md\n      │   ├── cde\n      │   │   ├── bindings\n      │   │   │   ├── cde-pl-pullrequest-binding.yaml\n      │   │   │   └── cde-pl-push-binding.yaml\n      │   │   ├── configmaps\n      │   │   │   └── cde-pl-configmap.yaml\n      │   │   ├── pipelines\n      │   │   │   └── cde-pl.yaml\n      │   │   ├── secrets\n      │   │   │   └── cde-pl-secret.yaml\n      │   │   ├── tasks\n      │   │   │   └── cde-task.yaml\n      │   │   └── template\n      │   │       └── cde-pl-template.yaml\n      │   └── manifest.yaml\n    ```\n\n<InlineNotification>\nNote: Pipelines in `experimental` do not get built.\n</InlineNotification>\n\n2. Now drag and drop your pipelines and tasks to any of these folders,\n\n3. You must update the `configmap` and `secret` we provided for you. But first, create another repository such as `devops-server`. In this repo `devops-server` you will be hosting your pipelines as Git releases. Do not forget to create a README.md file.\n\n    Navigate to `pipelines/stable/git-package-release-update/configmaps` and update the `pipeline-server-configmap.yaml`\n\n    ```yaml\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n    name: pipeline-server-configmap\n    namespace: kabanero\n    data:\n        repo_org: your-github-username-or-org\n        repo_name: your-github-repo-where-you-will-host-pipelines\n        image_registry_publish: 'false'\n        kabanero_pipeline_id: pipeline-manager\n    ```\n\n    Update the secret in `pipelines/stable/git-package-release-update/secrets/`\n\n    ```yaml\n    apiVersion: v1\n    kind: Secret\n    metadata:\n        name: pipeline-server-git\n        namespace: kabanero\n        type: kubernetes.io/basic-auth\n    data:\n        password: your-git-token-encoded\n        username: your-git-username-encoded\n    ```\n\n    Now run the following command to be able to retrieve resources for the `kabanero-pipeline` service account.\n\n    ```bash\n    oc adm policy add-cluster-role-to-user view system:serviceaccount:kabanero:kabanero-pipeline\n    ```\n\n4. Create web hook for the [devops-pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines) repository you created on step 1.\n\n5. Deploy your pipeline, tasks, event bindings and trigger templates by running the following command in the [devops-pipelines](https://github.com/ibm-garage-ref-storefront/devops-pipelines) repo you created on step 1:\n\n    ```bash\n    oc apply --recursive --filename pipelines/stable/git-package-release-update\n    git add .\n    git commit -m \"adding new pipelines...\"\n    git push\n    ```\n### Result\n\n- Your output should be the following:\n![Git Package Release Pipeline](../../images/git-package-release-update-pl-run.gif)\n\n- If you go to the [pipelines-server](https://github.com/ibm-garage-ref-storefront/pipelines-server/) repo you created on step 2, you should see a new release with your zip files as shown below:\n\n- Now inspect your Kabanero Custom Resource to ensure your `default-kabanero-pipelines.tar.gz` got added to the `pipelines` key value pair.\n\n  ```bash\n  oc get kabanero -o yaml\n  ```\n\n  ```yaml\n  stacks:\n      pipelines:\n      - https:\n          url: https://github.com/ibm-garage-ref-storefront/pipelines-server/releases/download/1.0/default-kabanero-pipelines.tar.gz\n      id: pipeline-manager\n      sha256: 8fe10018016e5059640b1a790afe2d6a1ff6c4f54bf3e7e4fa3fc0f82bb2207d\n  ```\n\n- The pipelines that you added to the [pipelines-server](https://github.com/ibm-garage-ref-storefront/pipelines-server/) repository should now be visible on the tekton dashboard as shown below:\n![](../../images/deploy-storefront-ms-to-openshift.png)\n![](../../images/git-package-release-pl.png)\n\nNow you can reuse these pipelines across your organization! If your cluster comes down you now have a backup of your pipelines.\n\n# Create a tekton webhook\n### Pre-reqs\n\nYou need to create an access token on the tekton dashboard or cli in the kabanero namespace.\nEarlier you created a github token on the github dashboard. You will need to get that token or generate another one and\npaste it below.\n![Access Token](/../../images/access-token.gif)\n\n- Web hook Settings:\n    ```\n    Name: devops-demo-kabanero-pipelines\n    Repistory-url: your forked repo url goes here\n    Access Token: Token you generated previously\n    ```\n\n- Target Pipeline Settings\n    ```\n    Namespace: kabanero\n    Pipeline: Choose artifactory-package-release-update-pl or git-package-release-update-pl\n    Service Account: Pipeline\n    Docker Registry: us.icr.io/project-name or docker.hub.io/projectname\n    ```\n","fileAbsolutePath":"/home/travis/build/ibm-garage-ref-storefront/docs/src/pages/related-repositories/pipelines.mdx"}}}}