{"componentChunkName":"component---src-pages-deployments-cntk-quarkus-mdx","path":"/deployments/cntk-quarkus/","result":{"pageContext":{"frontmatter":{"title":"Deploy Storefront Microservices onto Openshift 4.6 using Cloudnative toolkit","description":"Instructions to deploy on Openshift using Cloudnative toolkit"},"relativePagePath":"/deployments/cntk-quarkus.mdx","titleType":"page","MdxNode":{"id":"528daa76-3e20-5568-beb1-a4014dd044f9","children":[],"parent":"d134da71-b820-5bcb-8199-455a89178079","internal":{"content":"---\ntitle: Deploy Storefront Microservices onto Openshift 4.6 using Cloudnative toolkit\ndescription: Instructions to deploy on Openshift using Cloudnative toolkit\n---\n\n## Introduction\nToday you will be learning how to deploy all storefront microservices on Openshift using Cloudnative toolkit with the help of Tekton.\n\n![Storefront Architecture](../../images/storefront.png)\n\n## Table of Contents\n  * [Pre-requisites](#pre-requisites)\n  * [Set Up Databases for Storefront](#set-up-databases-for-storefront)\n  * [Create an organization on Github](#create-an-organization-on-github)\n  * [Deploy Microservices to Openshift using toolkit](#deploy-microservices-to-openshift-using-toolkit)\n\n## Pre-requisites\n\n+ [`SetUp Cloudnative toolkit`](https://cloudnativetoolkit.dev/workshop/setup#3.-setup-ibm-cloud-native-toolkit-workshop)\n+ [`Setup CLI and Terminal Shell`](https://cloudnativetoolkit.dev/workshop/setup#4-setup-cli-and-terminal-shell)\n+ [`Git cli`](https://git-scm.com/downloads)\n+ [`OC cli`](https://docs.openshift.com/container-platform/4.3/welcome/index.html)\n+ [`Tekton cli`](https://github.com/tektoncd/cli)\n+ [`gh cli`](https://cli.github.com/)\n\n## Set Up Databases for Storefront\n\nThis section will demonstrate how to deploy all the databases that are required by the storefront application. This will show you how to deploy MySQL, Elasticsearch, CouchDB, and MariaDB databases.\n\n### Clone the repo\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/storefront-databases.git\ncd storefront-databases\nchmod +x ./setup_databases.sh\n```\n\nRun the below command to deploy the databases on the openshift cluster where `storefront-dev` is the project name.\n\n```bash\noc login --token={your-api-token} --server={your-servername}\n./setup_databases.sh sf-quarkus-dev\n```\n\nThe output should be something similar to what is shown below.\n```bash\n$ ./setup_databases.sh sf-quarkus-dev\nNAMESPACE not set. Using parameter \"sf-quarkus-dev\"\n=========================================================================\nSet namespace\nerror: A project named \"sf-quarkus-dev\" does not exist on \"https://c100-e.jp-tok.containers.cloud.ibm.com:30791\".\nYour projects are:\n* calico-system\n* default\n* ibm-cert-store\n* ibm-system\n....\n....\n....\n* openshift-service-ca\n* openshift-service-ca-operator\n* openshift-user-workload-monitoring\n* openshift-vsphere-infra\n* tigera-operator\nTo see projects on another server, pass '--server=<server>'.\nNow using project \"sf-quarkus-dev\" on server \"https://c100-e.jp-tok.containers.cloud.ibm.com:30791\".\n\nYou can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app django-psql-example\n\nto build a new example application in Python. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node\n\n=========================================================================\nAdding security constraints\nsecuritycontextconstraints.security.openshift.io/anyuid added to: [\"system:serviceaccount:sf-quarkus-dev:default\"]\nsecuritycontextconstraints.security.openshift.io/privileged added to: [\"system:serviceaccount:sf-quarkus-dev:default\"]\n=========================================================================\nGenerating necessary secrets\nsecret/customer-couchdb-couchdb created\nsecret/orders-mariadb-secret created\nsecret/inventory-mysql created\n=========================================================================\nGenerating necessary configmaps\nconfigmap/customer-couchdb-couchdb created\nconfigmap/inventory-ms-data created\nconfigmap/mariadb-configmap created\nconfigmap/orders-mariadb-tests created\nconfigmap/inventory-mysql-test created\n=========================================================================\nDeploying the databases\nstatefulset.apps/customer-couchdb-couchdb created\ndeployment.apps/elasticsearch created\nstatefulset.apps/orders-mariadb created\ndeployment.apps/inventory-mysql created\nWaiting for deployment \"inventory-mysql\" rollout to finish: 0 of 1 updated replicas are available...\ndeployment \"inventory-mysql\" successfully rolled out\ndeployment \"elasticsearch\" successfully rolled out\npartitioned roll out complete: 1 new pods have been updated...\nWaiting for 1 pods to be ready...\nstatefulset rolling update complete 1 pods at revision orders-mariadb-77b894447...\n=========================================================================\nCreating database services\nservice/customer-couchdb-couchdb created\nservice/customer-couchdb-svc-couchdb created\nservice/elasticsearch created\nservice/orders-mariadb created\nservice/inventory-mysql created\n=========================================================================\nPopulating data in database\njob.batch/inventory-populate-mysql created\njob.batch/customer-create-user created\njob.batch/inventory-populate-mysql condition met\njob.batch/customer-create-user condition met\n=========================================================================\n```\n\nNow access your new project\n```\noc project sf-quarkus-dev\n```\nYou should get an output similar to what is shown below\n\n```bash\n> oc project sf-quarkus-dev\nAlready on project \"sf-quarkus-dev\" on server \"https://c100-e.jp-tok.containers.cloud.ibm.com:30791\".\n```\nUpon completing this section you can see above all of your databases have been deployed onto your openshift cluster. To check the status, run the below command.\n\n```bash\n> oc get pods\nNAME                               READY   STATUS      RESTARTS   AGE\ncustomer-couchdb-couchdb-0         2/2     Running     0          3m28s\ncustomer-create-user-ktzzn         0/1     Completed   0          2m36s\nelasticsearch-85b87b5fbd-6l4pk     1/1     Running     0          3m28s\ninventory-mysql-57887c6745-p7cpk   1/1     Running     0          3m27s\ninventory-populate-mysql-mwqqf     0/1     Completed   0          2m37s\norders-mariadb-0                   1/1     Running     0          3m28s\n```\n\n## Create an organization on Github\n\nWhen you create a new organization from scratch, it doesn't have any repositories associated with it.\n\nGithub has information on how to create an organization. View the link below for the steps:\n\nhttps://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/creating-a-new-organization-from-scratch\n\n## Clone the storefront-repo-automator to run the script\n\nYou can manually create a new repo and added it onto your Github organization or you can use the script that we provided for you. Clone the repository [storefront-repo-automator](https://github.com/ibm-garage-ref-storefront/storefront-repo-automator) as shown below:\n\nOnce you have cloned the repository, make sure you run the following command:\n\n  ``` bash\n  git clone https://github.com/ibm-garage-ref-storefront/storefront-repo-automator\n  cd storefront-repo-automator\n  export org={your-github-org-you-created}\n  ./run.sh\n  ```\n\nAfter running the storefront-repo-automator, you should be able to see the storefront repositories as shown below.\n\n![Storefront](../../images/storefront-test-org.png)\n\n## Deploy Microservices to Openshift using toolkit\n\nToday you will learning how to deploy all microservices to Openshift using Tekton. To achieve this, you must run the following steps:\n\n- Login into the cluster using `oc login`.\n\n- Sync the project to get all the necessary configurations.\n\n```\noc sync sf-quarkus-dev\n```\n\n### Inventory Microservice\n\n- Clone the `inventory-ms-quarkus` repo.\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/inventory-ms-quarkus.git\ncd inventory-ms-quarkus\n```\n\n- To trigger the pipeline, run the below command.\n\n```\noc pipeline --tekton\n```\n\n  - Enter git credentials.\n  - Use down/up arrow and select `ibm-java-maven`.\n  - Hit Enter to enable image scanning.\n  - Open the url to see the pipeline running in the OpenShift Console.\n\n- Verify that Pipeline Run completed successfully.\n\n- Grab the route.\n\n```\noc get route inventory-ms-quarkus --template='{{.spec.host}}'\n```\n\nYou will see something like below.\n\n```\n$ oc get route inventory-ms-quarkus --template='{{.spec.host}}'\ninventory-ms-quarkus-sf-quarkus-openshift.storefront-cn-6ccd7f378ae819553d37d5f2ee142bd6-0000.che01.containers.appdomain.cloud\n```\n\n- Now access the endpoint using `https://<route_url>/micro/inventory`.\n\nFor instance if using the above route, it will be https://inventory-ms-quarkus-sf-quarkus.storefront-cn-6ccd7f378ae819553d37d5f2ee142bd6-0000.che01.containers.appdomain.cloud/micro/inventory.\n\n### Catalog Microservice\n\n- Clone the `catalog-ms-quarkus` repo.\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/catalog-ms-quarkus.git\ncd catalog-ms-quarkus\n```\n\n- To trigger the pipeline, run the below command.\n\n```\noc pipeline --tekton\n```\n\n  - Enter git credentials.\n  - Use down/up arrow and select `ibm-java-maven`.\n  - Hit Enter to enable image scanning.\n  - Open the url to see the pipeline running in the OpenShift Console.\n\n- Verify that Pipeline Run completed successfully.\n\n- Grab the route.\n\n```\noc get route catalog-ms-quarkus --template='{{.spec.host}}'\n```\n\nYou will see something like below.\n\n```\n$oc get route catalog-ms-quarkus --template='{{.spec.host}}'\ncatalog-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud\n```\n\n- Now access the endpoint using `https://<route_url>/micro/items`.\n\nFor instance if using the above route, it will be https://catalog-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud/micro/items.\n\n### Set Up Keycloak operator\n\nFollow the instructions [here](https://www.keycloak.org/getting-started/getting-started-operator-openshift) to install keycloak operator.\n\nTo set up storefront specific settings follow the instructions [here](https://cloudnativereference.dev/related-repositories/keycloak/).\n\n### Orders Microservice\n\n- Clone the `orders-ms-quarkus` repo.\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/orders-ms-quarkus.git\ncd orders-ms-quarkus\n```\n\nNote: Before triggering this pipeline, make sure you set up `ibm-java-env` secret with necessary info like `KEYCLOAK_CLIENT_ID` and `KEYCLOAK_CLIENT_SECRET`.\n\n- To trigger the pipeline, run the below command.\n\n```\noc pipeline --tekton\n```\n\n  - Enter git credentials.\n  - Use down/up arrow and select `ibm-java-maven`.\n  - Hit Enter to enable image scanning.\n  - Open the url to see the pipeline running in the OpenShift Console.\n\n- Verify that Pipeline Run completed successfully.\n\n- Grab the route.\n\n```\noc get route orders-ms-quarkus --template='{{.spec.host}}'\n```\n\nYou will see something like below.\n\n```\n$ oc get route orders-ms-quarkus --template='{{.spec.host}}'\norders-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud\n```\n\n- Now access the endpoint using `https://<route_url>/micro/items`.\n\nFor instance if using the above route, it will be https://orders-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud/health.\n\n### Customer Microservice\n\n- Clone the `customer-ms-quarkus` repo.\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/customer-ms-quarkus.git\ncd customer-ms-quarkus\n```\n\nNote: Before triggering this pipeline, make sure you set up `ibm-java-env` secret with necessary info like `KEYCLOAK_CLIENT_ID` and `KEYCLOAK_CLIENT_SECRET`.\n\n- To trigger the pipeline, run the below command.\n\n```\noc pipeline --tekton\n```\n\n  - Enter git credentials.\n  - Use down/up arrow and select `ibm-java-maven`.\n  - Hit Enter to enable image scanning.\n  - Open the url to see the pipeline running in the OpenShift Console.\n\n- Verify that Pipeline Run completed successfully.\n\n- Grab the route.\n\n```\noc get route customer-ms-quarkus --template='{{.spec.host}}'\n```\n\nYou will see something like below.\n\n```\n$ oc get route customer-ms-quarkus --template='{{.spec.host}}'\ncustomer-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud\n```\n\n- Now access the endpoint using `https://<route_url>/micro/items`.\n\nFor instance if using the above route, it will be https://customer-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud/health.\n\n### Storefront UI\n\n- Clone the `storefront-ui` repo.\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/storefront-ui.git\ncd storefront-ui\ngit checkout hp-quarkus-version\n```\n\nNote: Before triggering this pipeline, make sure you set up `ibm-java-env` secret with necessary info like `KEYCLOAK_CLIENT_ID` and `KEYCLOAK_CLIENT_SECRET`.\n\n- To trigger the pipeline, run the below command.\n\n```\noc pipeline --tekton\n```\n\n  - Enter git credentials.\n  - Use down/up arrow and select `ibm-nodejs`.\n  - Hit Enter to enable image scanning.\n  - Open the url to see the pipeline running in the OpenShift Console.\n\n- Verify that Pipeline Run completed successfully.\n\n- Grab the route.\n\n```\noc get route storefront-ui --template='{{.spec.host}}'\n```\n\nYou will see something like below.\n\n```\n$ oc get route storefront-ui --template='{{.spec.host}}'\nstorefront-ui-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud\n```\n\n- Now access the endpoint using `https://<route_url>/micro/items`.\n\nFor instance if using the above route, it will be https://storefront-ui-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud/.\n\n![Storefront](../../images/storefront_result.png)\n\n- Once deployed successfully, you will be able to see the list of pipelines in the openshift web console as follows.\n\n![Storefront pipelines](../../images/sf_pipelines.png)\n","type":"Mdx","contentDigest":"02b2fd63a651bab4be12c349a92f932a","counter":112,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Deploy Storefront Microservices onto Openshift 4.6 using Cloudnative toolkit","description":"Instructions to deploy on Openshift using Cloudnative toolkit"},"exports":{},"rawBody":"---\ntitle: Deploy Storefront Microservices onto Openshift 4.6 using Cloudnative toolkit\ndescription: Instructions to deploy on Openshift using Cloudnative toolkit\n---\n\n## Introduction\nToday you will be learning how to deploy all storefront microservices on Openshift using Cloudnative toolkit with the help of Tekton.\n\n![Storefront Architecture](../../images/storefront.png)\n\n## Table of Contents\n  * [Pre-requisites](#pre-requisites)\n  * [Set Up Databases for Storefront](#set-up-databases-for-storefront)\n  * [Create an organization on Github](#create-an-organization-on-github)\n  * [Deploy Microservices to Openshift using toolkit](#deploy-microservices-to-openshift-using-toolkit)\n\n## Pre-requisites\n\n+ [`SetUp Cloudnative toolkit`](https://cloudnativetoolkit.dev/workshop/setup#3.-setup-ibm-cloud-native-toolkit-workshop)\n+ [`Setup CLI and Terminal Shell`](https://cloudnativetoolkit.dev/workshop/setup#4-setup-cli-and-terminal-shell)\n+ [`Git cli`](https://git-scm.com/downloads)\n+ [`OC cli`](https://docs.openshift.com/container-platform/4.3/welcome/index.html)\n+ [`Tekton cli`](https://github.com/tektoncd/cli)\n+ [`gh cli`](https://cli.github.com/)\n\n## Set Up Databases for Storefront\n\nThis section will demonstrate how to deploy all the databases that are required by the storefront application. This will show you how to deploy MySQL, Elasticsearch, CouchDB, and MariaDB databases.\n\n### Clone the repo\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/storefront-databases.git\ncd storefront-databases\nchmod +x ./setup_databases.sh\n```\n\nRun the below command to deploy the databases on the openshift cluster where `storefront-dev` is the project name.\n\n```bash\noc login --token={your-api-token} --server={your-servername}\n./setup_databases.sh sf-quarkus-dev\n```\n\nThe output should be something similar to what is shown below.\n```bash\n$ ./setup_databases.sh sf-quarkus-dev\nNAMESPACE not set. Using parameter \"sf-quarkus-dev\"\n=========================================================================\nSet namespace\nerror: A project named \"sf-quarkus-dev\" does not exist on \"https://c100-e.jp-tok.containers.cloud.ibm.com:30791\".\nYour projects are:\n* calico-system\n* default\n* ibm-cert-store\n* ibm-system\n....\n....\n....\n* openshift-service-ca\n* openshift-service-ca-operator\n* openshift-user-workload-monitoring\n* openshift-vsphere-infra\n* tigera-operator\nTo see projects on another server, pass '--server=<server>'.\nNow using project \"sf-quarkus-dev\" on server \"https://c100-e.jp-tok.containers.cloud.ibm.com:30791\".\n\nYou can add applications to this project with the 'new-app' command. For example, try:\n\n    oc new-app django-psql-example\n\nto build a new example application in Python. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node\n\n=========================================================================\nAdding security constraints\nsecuritycontextconstraints.security.openshift.io/anyuid added to: [\"system:serviceaccount:sf-quarkus-dev:default\"]\nsecuritycontextconstraints.security.openshift.io/privileged added to: [\"system:serviceaccount:sf-quarkus-dev:default\"]\n=========================================================================\nGenerating necessary secrets\nsecret/customer-couchdb-couchdb created\nsecret/orders-mariadb-secret created\nsecret/inventory-mysql created\n=========================================================================\nGenerating necessary configmaps\nconfigmap/customer-couchdb-couchdb created\nconfigmap/inventory-ms-data created\nconfigmap/mariadb-configmap created\nconfigmap/orders-mariadb-tests created\nconfigmap/inventory-mysql-test created\n=========================================================================\nDeploying the databases\nstatefulset.apps/customer-couchdb-couchdb created\ndeployment.apps/elasticsearch created\nstatefulset.apps/orders-mariadb created\ndeployment.apps/inventory-mysql created\nWaiting for deployment \"inventory-mysql\" rollout to finish: 0 of 1 updated replicas are available...\ndeployment \"inventory-mysql\" successfully rolled out\ndeployment \"elasticsearch\" successfully rolled out\npartitioned roll out complete: 1 new pods have been updated...\nWaiting for 1 pods to be ready...\nstatefulset rolling update complete 1 pods at revision orders-mariadb-77b894447...\n=========================================================================\nCreating database services\nservice/customer-couchdb-couchdb created\nservice/customer-couchdb-svc-couchdb created\nservice/elasticsearch created\nservice/orders-mariadb created\nservice/inventory-mysql created\n=========================================================================\nPopulating data in database\njob.batch/inventory-populate-mysql created\njob.batch/customer-create-user created\njob.batch/inventory-populate-mysql condition met\njob.batch/customer-create-user condition met\n=========================================================================\n```\n\nNow access your new project\n```\noc project sf-quarkus-dev\n```\nYou should get an output similar to what is shown below\n\n```bash\n> oc project sf-quarkus-dev\nAlready on project \"sf-quarkus-dev\" on server \"https://c100-e.jp-tok.containers.cloud.ibm.com:30791\".\n```\nUpon completing this section you can see above all of your databases have been deployed onto your openshift cluster. To check the status, run the below command.\n\n```bash\n> oc get pods\nNAME                               READY   STATUS      RESTARTS   AGE\ncustomer-couchdb-couchdb-0         2/2     Running     0          3m28s\ncustomer-create-user-ktzzn         0/1     Completed   0          2m36s\nelasticsearch-85b87b5fbd-6l4pk     1/1     Running     0          3m28s\ninventory-mysql-57887c6745-p7cpk   1/1     Running     0          3m27s\ninventory-populate-mysql-mwqqf     0/1     Completed   0          2m37s\norders-mariadb-0                   1/1     Running     0          3m28s\n```\n\n## Create an organization on Github\n\nWhen you create a new organization from scratch, it doesn't have any repositories associated with it.\n\nGithub has information on how to create an organization. View the link below for the steps:\n\nhttps://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/creating-a-new-organization-from-scratch\n\n## Clone the storefront-repo-automator to run the script\n\nYou can manually create a new repo and added it onto your Github organization or you can use the script that we provided for you. Clone the repository [storefront-repo-automator](https://github.com/ibm-garage-ref-storefront/storefront-repo-automator) as shown below:\n\nOnce you have cloned the repository, make sure you run the following command:\n\n  ``` bash\n  git clone https://github.com/ibm-garage-ref-storefront/storefront-repo-automator\n  cd storefront-repo-automator\n  export org={your-github-org-you-created}\n  ./run.sh\n  ```\n\nAfter running the storefront-repo-automator, you should be able to see the storefront repositories as shown below.\n\n![Storefront](../../images/storefront-test-org.png)\n\n## Deploy Microservices to Openshift using toolkit\n\nToday you will learning how to deploy all microservices to Openshift using Tekton. To achieve this, you must run the following steps:\n\n- Login into the cluster using `oc login`.\n\n- Sync the project to get all the necessary configurations.\n\n```\noc sync sf-quarkus-dev\n```\n\n### Inventory Microservice\n\n- Clone the `inventory-ms-quarkus` repo.\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/inventory-ms-quarkus.git\ncd inventory-ms-quarkus\n```\n\n- To trigger the pipeline, run the below command.\n\n```\noc pipeline --tekton\n```\n\n  - Enter git credentials.\n  - Use down/up arrow and select `ibm-java-maven`.\n  - Hit Enter to enable image scanning.\n  - Open the url to see the pipeline running in the OpenShift Console.\n\n- Verify that Pipeline Run completed successfully.\n\n- Grab the route.\n\n```\noc get route inventory-ms-quarkus --template='{{.spec.host}}'\n```\n\nYou will see something like below.\n\n```\n$ oc get route inventory-ms-quarkus --template='{{.spec.host}}'\ninventory-ms-quarkus-sf-quarkus-openshift.storefront-cn-6ccd7f378ae819553d37d5f2ee142bd6-0000.che01.containers.appdomain.cloud\n```\n\n- Now access the endpoint using `https://<route_url>/micro/inventory`.\n\nFor instance if using the above route, it will be https://inventory-ms-quarkus-sf-quarkus.storefront-cn-6ccd7f378ae819553d37d5f2ee142bd6-0000.che01.containers.appdomain.cloud/micro/inventory.\n\n### Catalog Microservice\n\n- Clone the `catalog-ms-quarkus` repo.\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/catalog-ms-quarkus.git\ncd catalog-ms-quarkus\n```\n\n- To trigger the pipeline, run the below command.\n\n```\noc pipeline --tekton\n```\n\n  - Enter git credentials.\n  - Use down/up arrow and select `ibm-java-maven`.\n  - Hit Enter to enable image scanning.\n  - Open the url to see the pipeline running in the OpenShift Console.\n\n- Verify that Pipeline Run completed successfully.\n\n- Grab the route.\n\n```\noc get route catalog-ms-quarkus --template='{{.spec.host}}'\n```\n\nYou will see something like below.\n\n```\n$oc get route catalog-ms-quarkus --template='{{.spec.host}}'\ncatalog-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud\n```\n\n- Now access the endpoint using `https://<route_url>/micro/items`.\n\nFor instance if using the above route, it will be https://catalog-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud/micro/items.\n\n### Set Up Keycloak operator\n\nFollow the instructions [here](https://www.keycloak.org/getting-started/getting-started-operator-openshift) to install keycloak operator.\n\nTo set up storefront specific settings follow the instructions [here](https://cloudnativereference.dev/related-repositories/keycloak/).\n\n### Orders Microservice\n\n- Clone the `orders-ms-quarkus` repo.\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/orders-ms-quarkus.git\ncd orders-ms-quarkus\n```\n\nNote: Before triggering this pipeline, make sure you set up `ibm-java-env` secret with necessary info like `KEYCLOAK_CLIENT_ID` and `KEYCLOAK_CLIENT_SECRET`.\n\n- To trigger the pipeline, run the below command.\n\n```\noc pipeline --tekton\n```\n\n  - Enter git credentials.\n  - Use down/up arrow and select `ibm-java-maven`.\n  - Hit Enter to enable image scanning.\n  - Open the url to see the pipeline running in the OpenShift Console.\n\n- Verify that Pipeline Run completed successfully.\n\n- Grab the route.\n\n```\noc get route orders-ms-quarkus --template='{{.spec.host}}'\n```\n\nYou will see something like below.\n\n```\n$ oc get route orders-ms-quarkus --template='{{.spec.host}}'\norders-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud\n```\n\n- Now access the endpoint using `https://<route_url>/micro/items`.\n\nFor instance if using the above route, it will be https://orders-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud/health.\n\n### Customer Microservice\n\n- Clone the `customer-ms-quarkus` repo.\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/customer-ms-quarkus.git\ncd customer-ms-quarkus\n```\n\nNote: Before triggering this pipeline, make sure you set up `ibm-java-env` secret with necessary info like `KEYCLOAK_CLIENT_ID` and `KEYCLOAK_CLIENT_SECRET`.\n\n- To trigger the pipeline, run the below command.\n\n```\noc pipeline --tekton\n```\n\n  - Enter git credentials.\n  - Use down/up arrow and select `ibm-java-maven`.\n  - Hit Enter to enable image scanning.\n  - Open the url to see the pipeline running in the OpenShift Console.\n\n- Verify that Pipeline Run completed successfully.\n\n- Grab the route.\n\n```\noc get route customer-ms-quarkus --template='{{.spec.host}}'\n```\n\nYou will see something like below.\n\n```\n$ oc get route customer-ms-quarkus --template='{{.spec.host}}'\ncustomer-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud\n```\n\n- Now access the endpoint using `https://<route_url>/micro/items`.\n\nFor instance if using the above route, it will be https://customer-ms-quarkus-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud/health.\n\n### Storefront UI\n\n- Clone the `storefront-ui` repo.\n\n```bash\ngit clone https://github.com/ibm-garage-ref-storefront/storefront-ui.git\ncd storefront-ui\ngit checkout hp-quarkus-version\n```\n\nNote: Before triggering this pipeline, make sure you set up `ibm-java-env` secret with necessary info like `KEYCLOAK_CLIENT_ID` and `KEYCLOAK_CLIENT_SECRET`.\n\n- To trigger the pipeline, run the below command.\n\n```\noc pipeline --tekton\n```\n\n  - Enter git credentials.\n  - Use down/up arrow and select `ibm-nodejs`.\n  - Hit Enter to enable image scanning.\n  - Open the url to see the pipeline running in the OpenShift Console.\n\n- Verify that Pipeline Run completed successfully.\n\n- Grab the route.\n\n```\noc get route storefront-ui --template='{{.spec.host}}'\n```\n\nYou will see something like below.\n\n```\n$ oc get route storefront-ui --template='{{.spec.host}}'\nstorefront-ui-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud\n```\n\n- Now access the endpoint using `https://<route_url>/micro/items`.\n\nFor instance if using the above route, it will be https://storefront-ui-sf-quarkus-dev.mq-devops-6ccd7f378ae819553d37d5f2ee142bd6-0000.par01.containers.appdomain.cloud/.\n\n![Storefront](../../images/storefront_result.png)\n\n- Once deployed successfully, you will be able to see the list of pipelines in the openshift web console as follows.\n\n![Storefront pipelines](../../images/sf_pipelines.png)\n","fileAbsolutePath":"/home/travis/build/ibm-garage-ref-storefront/docs/src/pages/deployments/cntk-quarkus.mdx"}}}}